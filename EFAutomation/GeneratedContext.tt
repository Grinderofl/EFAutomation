<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Data.Entity"#>
<#@ import namespace="EFAutomation"#>
<#@ import namespace="System.Data.Entity.Migrations"#>
<#@ import namespace="System.Data.Entity.Infrastructure"#>
<#@ parameter type="System.Collections.Generic.List<Type>" name="Types"#>
<#@ parameter type="System.Collections.Generic.List<String>" name="Assemblies"#>
<#@ parameter type="System.Boolean" name="MigrateToLatestVersion"#>
<#@ parameter type="System.String" name="Connection"#>

namespace EFMigrations
{
	using System.Data.Entity.Migrations;
	using System.Data.Entity;
	using System.Data.Entity.Infrastructure;
	using System.Data.Entity.Validation;
	using EFAutomation;
	using System.Collections.Generic;
	using System.Threading;
	using System.Threading.Tasks;

	<#foreach(var assembly in Assemblies)
		 { #>
			using <#= assembly #>;
		<# } #>


	public class Context : DbContext, IContext
	{
		public Context(string connection) : base(connection) 
		{
			<# if(MigrateToLatestVersion) {#>
			Database.SetInitializer(new MigrateDatabaseToLatestVersion<Context, Configuration>());
			<#}#>
		}
		<#foreach(var type in Types) 
			{#>
			
			public DbSet<<#= type.Name #>> <#= type.Name #>s { get; set; }

		<# } #>


		public event ModelCreatingEventHandler ModelCreating;
		public event SavingChangesEventHandler SavingChanges;
		public event ValidatingEntityEventHandler ValidatingEntity;
				
		public new bool ShouldValidateEntity(DbEntityEntry entityEntry){ 
			return base.ShouldValidateEntity(entityEntry);
		}

		public override int SaveChanges() {
			if(SavingChanges != null)
				SavingChanges(this, new SavingChangesEventArgs(){ Context = this }); 
			return base.SaveChanges();
		}

		public override Task<int> SaveChangesAsync() {
			if(SavingChanges != null)
				SavingChanges(this, new SavingChangesEventArgs(){ Context = this });
			return base.SaveChangesAsync();
		}

		protected override void OnModelCreating(DbModelBuilder modelBuilder){
			if(ModelCreating != null)
				ModelCreating(this, new ModelBuilderEventArgs(){ ModelBuilder = modelBuilder } );
			base.OnModelCreating(modelBuilder);
		}

		public new Task<int> SaveChangesAsync(CancellationToken cancellationToken) {
			if(SavingChanges != null)
				SavingChanges(this, new SavingChangesEventArgs(){ Context = this });
			return base.SaveChangesAsync(cancellationToken);
		}

		public new DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary<object, object> items)
		{
			if(ValidatingEntity != null)
				ValidatingEntity(this, new ValidatingEntityEventArgs(){ EntityEntry = entityEntry, Items = items }); 
			return base.ValidateEntity(entityEntry, items);
		}

	}

	public class ContextFactory : IDbContextFactory<Context>
	{
		public Context Create()
		{
			return new Context("<#= Connection #>");
		}
	}
	 
	public class Configuration : DbMigrationsConfiguration<Context>, IDbMigrationsConfiguration
	{
		public Configuration()
		{
			<# if(MigrateToLatestVersion) {#>
				AutomaticMigrationsEnabled = true;
				AutomaticMigrationDataLossAllowed = true;
			<# } #>
		}

		public event SeedingEventHandler Seeding;

		protected override void Seed(Context context)
		{
			if(Seeding != null)
				Seeding(this, new SeedingEventArgs(){ Context = (IContext)context });
		}
				
	}
}