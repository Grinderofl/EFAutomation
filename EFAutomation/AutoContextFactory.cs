using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.Data.Entity.Migrations.Infrastructure;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Core;
using EFAutomation.Exceptions;
using Microsoft.CSharp;

namespace EFAutomation
{
    public class AutoContextFactory : IAutoContextFactory
    {
        private readonly DbMigrationsConfiguration _migrationsConfiguration;
        private int _migrationAttempts;

        public IAutoContextFactoryConfiguration Configuration { get; set; }

        public string MigrationDirectory { get; set; }

        private readonly List<Assembly> _assemblies = new List<Assembly>();
        private readonly List<Type> _subClassesOf = new List<Type>();
        private readonly List<Type> _singleClasses = new List<Type>();
        private readonly GeneratedContext _contextGenerator;

        # region Add assemblies

        public IAutoContextFactory AddEntitiesBasedOn<T>() where T : class
        {
            _subClassesOf.Add(typeof (T));
            return this;
        }

        public IAutoContextFactory AddEntity<T>() where T : class
        {
            _singleClasses.Add(typeof(T));
            return this;
        }

        public IAutoContextFactory AddAssemblyContaining<T>() where T : class
        {
            _assemblies.Add(Assembly.GetAssembly(typeof (T)));
            return this;
        }

        public IAutoContextFactory AddAssembly(Assembly assembly)
        {
            _assemblies.Add(assembly);
            return this;
        }

        #endregion

        public AutoContextFactory()
        {
            _contextGenerator = new GeneratedContext();
            _migrationsConfiguration = new DbMigrationsConfiguration();
            Configuration = new AutoContextFactoryConfiguration()
            {
                AutoGeneratedMigrationsEnabled = true,
                AutomaticMigrationsEnabled = false,
                AutomaticMigrationDataLossAllowed = false,
                CodeProvider = new CSharpCodeProvider(),
                MigrationsDirectory = "AutomaticMigrations",
                Connection = "DefaultConnection"
            };
        }

        public AutoContextFactory(IAutoContextFactoryConfiguration configuration) : this()
        {
            Configuration = configuration;
        }

        public IContext Create()
        {
            var compilerParameters = DefaultCompilerParameters();
            var types = new List<Type>();
            foreach (var assembly in _assemblies)
            {
                foreach (var entity in _subClassesOf)
                {
                    var entity1 = entity;
                    types.AddRange(assembly.GetTypes().Where(x => x.IsSubclassOf(entity1) && !x.IsAbstract));
                }
            }
            types.AddRange(_singleClasses);
            types = types.Distinct().ToList();
            compilerParameters.ReferencedAssemblies.AddRange(
                types.Select(x => Assembly.GetAssembly(x).Location).Distinct().ToArray());
            var namespaces = new List<string>();
            namespaces.AddRange(types.Select(x => x.Namespace));
            _contextGenerator.Session = new Dictionary<string, object>();
            _contextGenerator.Session["Types"] = types;
            _contextGenerator.Session["Assemblies"] = namespaces;
            _contextGenerator.Initialize();
            var generatedContextSource = _contextGenerator.TransformText();
            var compiledAssembly = Configuration.CodeProvider.CompileAssemblyFromSource(compilerParameters,
                generatedContextSource);
            if(compiledAssembly.Errors.Count > 0)
                throw new AssemblyCompilationErrorsException(compiledAssembly.Errors);

            return (IContext)compiledAssembly.CompiledAssembly.CreateInstance("EFMigrations.Context", false, BindingFlags.CreateInstance, null,
                        new object[] { "DefaultConnection" }, CultureInfo.CurrentCulture, null);
        }

        private void GenerateMigrations()
        {
        }

        private CompilerParameters DefaultCompilerParameters()
        {
            var compilerParams = new CompilerParameters();
            compilerParams.ReferencedAssemblies.Add(Assembly.GetAssembly(typeof(DbContext)).Location);
            compilerParams.ReferencedAssemblies.Add("System.Data.dll");
            compilerParams.ReferencedAssemblies.Add("System.Data.Entity.dll");
            compilerParams.ReferencedAssemblies.Add("System.Core.dll");
            compilerParams.ReferencedAssemblies.Add("System.dll");
            compilerParams.ReferencedAssemblies.Add(Assembly.GetAssembly(typeof(IContext)).Location);
            compilerParams.GenerateInMemory = true;
            return compilerParams;
        }

        public void MigrateToLatest()
        {
            if (_migrationAttempts > 2)
            {
                _migrationAttempts = 0;
                return;
            }

            try
            {
                TryMigrate();
                _migrationAttempts = 0;
            }
            catch(AutomaticMigrationsDisabledException)
            {
                _migrationAttempts++;
                GenerateMigrations();
                MigrateToLatest();
            }
        }

        private void TryMigrate()
        {
            // Compile migrations assembly
            var parameters = DefaultCompilerParameters();
            var files = Directory.GetFiles(MigrationDirectory).Where(x => x.EndsWith(".cs"));
            var compiled = Configuration.CodeProvider.CompileAssemblyFromSource(parameters, files.ToArray());
            // Assign the assembly to migrations configuration
            _migrationsConfiguration.MigrationsAssembly = compiled.CompiledAssembly;
            // Migrate
            var migrator = new DbMigrator(_migrationsConfiguration);
            migrator.Update();
        }
        
    }
}
