{"name":"Entity Framework Conventions","tagline":"","body":"EFAutomation\r\n============\r\n\r\nEFAutomation is a convention based extension library for Entity Framework to automate several tasks currently cumbersome to do. It allows developers to create an Entity Framework based Context without having to specify each entity by putting it as DbSet<> as property. \r\n\r\nNuGet: http://www.nuget.org/packages/EFAutomation/\r\n\r\nBasic usage\r\n============\r\n\r\n1) Create the context factory\r\n```c#\r\nprivate IAutoContextFactory _autoContextFactory;\r\n_autoContextFactory = new AutoContextFactory();\r\n```\r\n\r\n2) Configure the factory\r\n```c#\r\n_autoContextFactory.Configuration.AutoGeneratedMigrationsEnabled = true; \r\n_autoContextFactory.Configuration.AutoMigrateGeneratedMigrationsEnabled = true;\r\n_autoContextFactory.Configuration.MigrationsDirectory = @\"ProjectDir\\Migrations\";\r\n_autoContextFactory.AddEntitiesBasedOn<BaseEntity>().AddAssemblyContaining<BaseEntity>();\r\n```\r\n3) Create the context and use it\r\n```c#\r\nvar context = _autoContextFactory.Context();\r\ncontext.Set<Item>().Add(new Item());\r\ncontext.SaveChanges();\r\n```\r\n\r\nDetailed info\r\n=============\r\n\r\n### Lifecycle\r\nFactory lifecyle should be same as your applicatin lifecycle. Every Context() call checks if database has already been migrated, provided AutoMigrateGeneratedMigrationsEnabled is set to true. If you manage migrations manually, lifecycle can be anything and you will be responsible for performance and errors. IContext lifecycle can be anything you would normally set a standard DbContext to.\r\n\r\n### Context\r\nEFAutomation declares an IContext interface which declares effectively same functions as original DbContext and adds some of its own, such as events. You are free to cast it to standard DbContext if you wish.\r\n\r\nContext() call from Factory also accepts a string parameter for connection string, either full connectionstring or the name of it, just like standard DbContext. It's suggested to just set the Connection option under Configuration property, though.\r\n\r\n### Configuration\r\n**IAutoContextFactoryConfiguration** provides several configuration options. \r\n* **MigrationsDirectory** - where you want the program to store its migration files. The files are standard Code First Migration files. This directory should be included in your source control to allow synchronized migrations between developers.\r\n\r\n* **AutoMigrateToLatestVersionEnabled** - this is an option normally used in standard Code First Migration Configuration as _AutomaticMigrationsEnabled_, having this option on disables the Code Based migration generation.\r\n\r\n* **AutomaticMigrationDataLossAllowed** - goes together with AutoMigrateToLatestVersionEnabled, allows data loss on automatic migrations.\r\n\r\n* **AutoGeneratedMigrationsEnabled** - option used to specify that, if model has changed, a new migration should be generated. This option exists so programmatic migration generation through Factory could be used.\r\n\r\n* **AutoMigrateGeneratedMigrationsEnabled** - option used to specify whether, if model has changed, newly generated migrations should be migrated to database. If this feature is disabled, migrations need to be done programmatically through Factory. If AutoGeneratedMigrationsEnabled is set to false, migrations need to be generated programmatically or migrations will fail.\r\n\r\n* **Connection** - your standard connectionstring or connectionstring name\r\n\r\n* **MigrationsAssemblyAsFile** - option used if you want migrations to be compiled into a file or loaded from an existing file. Useful if you want to deploy your application but not distribute the .cs  files. Make sure to set the file name.\r\n\r\n* **MigrationsAssemblyFileLocation** - name of the file the compiled migration assembly should be saved to. Only functions when MigrationsAssemblyAsFile is true.\r\n\r\n**NB! Order of operations is important. Any configuration should be done before Context(), MigrateToLatest() or GenerateMigrations() are called for the first time on Factory, although before migrating, anything ought to work.**\r\n\r\n### Factory\r\n* **Configuration** - IAutoContextFactoryConfiguration for configuring the factory\r\n\r\n* **AddEntitiesBasedOn&lt;T&gt;()** - This method allows convention based adding of entities to the context. All entities that are not abstract and are based on this class (or these classes, if you add more than one) are automatically added. Assemblies to be searched from also needs to be added.\r\n\r\n* **AddEntity&lt;T&gt;()** - Adds a single entity to context.\r\n\r\n* **AddAssemblyContaining&lt;T&gt;()** - Adds an assembly which should be searched for convention-added classes, which contains specified class.\r\n```c#\r\npublic class EntityBase\r\n{\r\n  public int Id { get; set;\r\n}\r\n\r\npublic class EntityOne : EntityBase {}\r\npublic class EntityTwo : EntityBase {}\r\n\r\nfactory.AddEntitiesBasedOn<EntityBase>().AddAssemblyContaining<EntityOne>(); \r\n// Adds EntityOne and EntityTwo to context\r\n```\r\n\r\n* **AddAssembly(Assembly assembly)** - Adds a single assembly that should be searched for convention-added classes.\r\n\r\n* **Context()** - Retrieves the context (and also causes it to be generated if it hasn't yet). If AutoMigrateGeneratedMigrationsEnabled is true, migrations are also run.\r\n\r\n* **MigrateToLatest()** - Migrates the database to latest version (and also causes context to be generated if it hasn't yet). If AutoGeneratedMigrationsEnabled is true, missing migrations are automatically generated.\r\n\r\n* **GenerateMigrations()** - Generates migrations and saves them under specified migrations directory (and also causes context to be generated if it hasn't yet). _Does not automatically migrate_.\r\n\r\n* **IncludedTypes()** - Returns a list of types currently included in the context.\r\n* **AssembliesThatContain()** - Returns a list of assemblies that should be searched.\r\n* **Entities()** - Returns a list of types that are single included in context.\r\n* **EntitiesToBaseOn()** - Returns a list of base types to be used for searching.\r\n\r\n**NB! Order of operations is important. Any other method should be called before Context(), MigratToLatest() or GenerateMigrations() are called for the first time on Factory** \r\n\r\nEvents\r\n==========\r\n**All events fire before their original base events**\r\n\r\n### IContext Events\r\n* SavingChanges - executed when changes are being saved. Gets executed in both Async and normal saving.\r\n```c#\r\ncontext.SavingChanges += (sender, args) => { args.Context.(...);/* args.Context is IContext */ };\r\n```\r\n\r\n### IAutoContextFactory Events\r\n* Seeding - executed when database is seeded. Put your AddOrUpdate events here.\r\n```c#\r\nfactory.Seeding += (sender, args) => { args.Context.(...); /* args.Context is IContext */ };\r\n```\r\n* ModelCreating - executed when model is being created. Conventions should be set up here.\r\n```c#\r\ncontext.ModelCreating += (sender, args) => { args.ModelBuilder.(...);/* args.ModelBuilder is standard DbModelBuilder */};\r\n```\r\nVersion history\r\n==========\r\n\r\n#### v 2.0\r\n* Complete rework of migrations and context generation. Now using Reflection instead of T4, allowing the runtime injection of ModelCreating object which wasn't working in version 1.\r\n* Added support for retrieving currently stored entities, base entities and assemblies for Context generation.\r\n\r\n#### v 1.0.3\r\n* Context() now accepts a connectionString parameter\r\n\r\n#### v 1.0.2\r\n* Context() now has its own lifecycle.\r\n\r\n#### v 1.0.1\r\n* Added IncludedTypes() to Factory\r\n\r\n#### v 1.0\r\n* Initial release.\r\n\r\nTODO\r\n==========\r\n* Perhaps give separate events for async savechanges?\r\n* Add Identity support.\r\n\r\nKnown bugs\r\n==========\r\n* Might have random file access errors.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}